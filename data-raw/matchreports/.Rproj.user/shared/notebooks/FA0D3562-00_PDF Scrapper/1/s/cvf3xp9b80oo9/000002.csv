"0","###################################################################################"
"0","############ FUNCTION match_stat BEGIN ############################################"
"0","#"
"0","# Function uses the tabulizer package to export the "
"0","# Team statistcs table. It takes a data.frame as first"
"0","# argument and the team as second argument (position). "
"0","# The function is calibrated for the position of the team "
"0","# statistics manually by using the locate_areas()"
"0","# function of the tabulizer package"
"0","#"
"0","  match_stat <- function(x, position = 1){"
"0","          "
"0","    if (position == 1) {"
"0","  "
"0","          pos <- list(c(177,  0, 340, 840))"
"0","          "
"0","        }  "
"0","        "
"0","    if (position == 2) {"
"0","            "
"0","        pos <- list(c(415, 0, 573, 840))"
"0","            "
"0","        }"
"0","        "
"0","        as.data.frame(extract_tables(x, "
"0","                                     area = pos, "
"0","                                     output = ""data.frame"", "
"0","                                     method = ""stream""))"
"0","  }"
"0","    "
"0","############ FUNCTION match_stat END ##############################################"
"0","###################################################################################"
"0","###################################################################################"
"0","############ FUNCTION clean_reception BEGIN #######################################"
"0","#"
"0","# Function takes a data.frame as argument and checks if the number of columns "
"0","# is 16. If TRUE then column 11 ist assumed to be messed up and it is separated"
"0","# using regular expressions. Then everything is put together and returned. If "
"0","# condition is FALSE, the function returns the original object"
"0","#"
"0"," clean_reception <- function(x){"
"0","      "
"0","  # If number of columns is 16, then column 11"
"0","  # has to be cleaned. This is done in the if "
"0","  # col_number 16 == TRUE case"
"0","        "
"0","    if(dim(x)[2] == 16) {"
"0","            "
"0","      # Split data.frame in 3 parts"
"0","      "
"0","      part.1 <- x[1:10]"
"0","      part.2 <- x[11]"
"0","      part.3 <- x[12:16]"
"0","            "
"0","      # Clean column 11 and separate it into two columns"
"0","      "
"0","      names(part.2) <- c(""X1"")"
"0","      "
"0","      part.2   <- part.2 %>%"
"0","      mutate(X1   = str_replace(X1, ""[:space:]{1,5}"", """")) %>%"
"0","      mutate(col1 = str_extract(X1, ""([:digit:]|[:digit:][:digit:])%"")) %>%"
"0","      mutate(col2 = str_sub(X1, -2)) %>%"
"0","      mutate(col1 = str_remove(col1, ""\\("")) %>%"
"0","      mutate(col1 = str_remove(col1, ""\\)"")) %>%"
"0","      mutate(col1 = str_remove(col1, ""%"")) %>%"
"0","      mutate(col2 = str_remove(col2, ""\\)"")) %>%"
"0","      mutate(col2 = str_replace_all(col2, ""Â·{1,}"", """")) %>%"
"0","      select(col1, col2)"
"0","              "
"0","      # Bind everything back together"
"0","      "
"0","      part.1 <- bind_cols(part.1, part.2)"
"0","      part   <- bind_cols(part.1, part.3)"
"0","              "
"0","      return(part)"
"0","              "
"0","    } else {"
"0","          "
"0","      return(x)"
"0","      "
"0","      }"
"0","    }"
"0","############ FUNCTION clean_reception END ######################"
"0","################################################################"
"0","################################################################ "
"0","############ FUNCTION clean_col_1 BEGIN ########################"
"0","    "
"0","    clean_col_1 <- function(x) {"
"0","      "
"0","      y <- x[1]"
"0","      names(y) <- c(""X1"")"
"0","        "
"0","      y <- y %>% "
"0","           mutate(shirt.number = str_extract(X1, ""[:digit:]{1,2}"")) %>% "
"0","           mutate(shirt.number = as.integer((shirt.number))) %>%"
"0","           mutate(set.1 = as.integer(str_sub(X1, -2)))       %>%"
"0","           mutate(X1 = str_replace_all(X1, ""[:digit:]"", """")) %>%"
"0","           mutate(X1 = str_replace_all(X1, ""C "", """"))        %>%"
"0","           mutate(X1 = str_replace_all(X1, ""L "", """"))        %>%"
"0","           mutate(X1 = str_remove(X1, ""[:blank:]""))          %>%"
"0","           rename(player.name = X1)                          %>%"
"0","           select(shirt.number, player.name)"
"0","      "
"0","      return(y)  "
"0","    "
"0","    }"
"0","############ FUNCTION clean_col_1 END ##########################"
"0","################################################################ "
"0","################################################################ "
"0","############ FUNCTION rm_useless_rows BEGIN ####################"
"0","# "
"0","# Function removes columns without shirt numbers, i.e."
"0","# non-player columns."
"0","#"
"0","    rm_useless_rows <- function(x) {"
"0","      "
"0","        return(x %>% filter(!is.na(shirt.number)))"
"0","        "
"0","    }"
"0","############ FUNCTION rm_useless_rows END ######################"
"0","################################################################ "
"0","################################################################ "
"0","############ FUNCTION rename_cols BEGIN ########################"
"0","    "
"0","    rename_cols <- function(x) {"
"0","        "
"0","        names(x) <- c(""shirt.number"", ""player.name"", ""vote"", ""pt_tot"","
"0","                      ""pt_bp"", ""pt_profloss"", ""serv_tot"", ""serv_err"","
"0","                      ""serv_pt"", ""rec_tot"", ""rec_err"", ""rec_pos"", ""rec_per"","
"0","                      ""att_tot"", ""att_err"", ""att_blo"", ""att_pt"", ""att_per"","
"0","                      ""blo_pt"")"
"0","          "
"0","        return(x)"
"0","        "
"0","    }"
"0","############ FUNCTION rename_cols END ##########################"
"0","################################################################ "
"0","################################################################ "
"0","############ FUNCTION numerize_vars BEGIN ######################"
"0","    "
"0"," numerize_vars <- function(x) {"
"0","      "
"0","   return("
"0","     x %>% mutate(rec_pos = str_remove(rec_pos, ""%""),"
"0","                  rec_per = str_remove(rec_per, ""%""),"
"0","                  rec_per = str_remove(rec_per, ""\\(""),"
"0","                  rec_per = str_remove(rec_per, ""\\)""),"
"0","                  att_per = str_remove(att_per, ""%"")) %>%"
"0","                  mutate_each(funs(as.integer), starts_with(""vote"")) %>%"
"0","                  mutate_each(funs(as.integer), starts_with(""pt_"")) %>%"
"0","                  mutate_each(funs(as.integer), starts_with(""serv_"")) %>%"
"0","                  mutate_each(funs(as.integer), starts_with(""rec_"")) %>%"
"0","                  mutate_each(funs(as.integer), starts_with(""att_"")) %>%"
"0","                  mutate_each(funs(as.integer), starts_with(""blo_pt""))"
"0","    )"
"0","        "
"0"," }"
"0","############ FUNCTION numerize_vars END ########################"
"0","################################################################ "
