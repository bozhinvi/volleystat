team.2.part.1[[92]]
team.2.part.1[[93]]
team.2.part.1[[94]]
team.2.part.1[[95]
]
team.2.part.1[[96]
View(nm.vec)
View(nm.vec)
team.2.part.1[[219]
]
team.2.part.1[[110]]
# Only columns 8 and all subsequent columns are selected
team.1.part.2 <- map(team.1, function(x){x[-c(1:7)]} )
team.2.part.2 <- map(team.2, function(x){x[-c(1:7)]} )
# Delete all empty columns:
team.1.part.2 <- map(team.1.part.2, function(x){x %>% select_if(~sum(!is.na(.)) > 0)})
team.2.part.2 <- map(team.2.part.2, function(x){x %>% select_if(~sum(!is.na(.)) > 0)})
# Clean reception variable
team.1.part.2 <- map(team.1.part.2, clean_reception)
team.2.part.2 <- map(team.2.part.2, clean_reception)
# Combine part.1 and part.2
team.1.clean <- map2(team.1.part.1, team.1.part.2, bind_cols)
team.2.clean <- map2(team.2.part.1, team.2.part.2, bind_cols)
rm(team.1.part.1, team.1.part.2, team.2.part.1, team.2.part.2)
# Rename cols
team.1.clean <- map(team.1.clean, rename_cols)
team.2.clean <- map(team.2.clean, rename_cols)
# Remove rows with shirt.number == NA
team.1.clean <- map(team.1.clean, rm_useless_rows)
team.2.clean <- map(team.2.clean, rm_useless_rows)
# Transform chars to integers
team.1.clean <- map(team.1.clean, numerize_vars)
team.2.clean <- map(team.2.clean, numerize_vars)
View(team.1.clean)
ids <- read.csv("00_SEASON_TEAM_IDENTIFIER.csv", header = TRUE) %>% select(-X)
ids <- read.csv("~/Seafile/DataScience/VBLProject/Matchreports/Women2017-18/00_SEASON_TEAM_IDENTIFIER.csv",
header = TRUE) %>% select(-X)
ids <- read.csv("00_SEASON_TEAM_IDENTIFIER.csv",
header = TRUE) %>% select(-X)
team.1.clean.df <- bind_rows(team.1.clean, .id = "match.id") %>%
mutate(match.id = as.integer(match.id))
id.need <- ids %>%
filter(league.gender == "Women", season.id == "1718") %>%
select(league.gender, season.id, match.id, team.1, team.1.id)
team.1.clean.df <- id.need %>%
anti_join(team.1.clean.df, by = c("match.id" = "match.id"))
# Loading identifier
ids <- read.csv("00_SEASON_TEAM_IDENTIFIER.csv",
header = TRUE) %>% select(-X)
# Unnesting data.frame
team.1.clean.df <- bind_rows(team.1.clean, .id = "match.id") %>%
mutate(match.id = as.integer(match.id))
id.need <- ids %>%
filter(league.gender == "Women", season.id == "1718") %>%
select(league.gender, season.id, match.id, team.1, team.1.id)
team.1.clean.df <- id.need %>%
left_join(team.1.clean.df, by = c("match.id" = "match.id"))
View(team.1.clean.df)
# Unnesting data.frame for Team 2
team.2.clean.df <- bind_rows(team.2.clean, .id = "match.id") %>%
mutate(match.id = as.integer(match.id))
id.need <- ids %>%
filter(league.gender == "Women", season.id == "1718") %>%
select(league.gender, season.id, match.id, team.2, team.2.id)
team.2.clean.df <- id.need %>%
left_join(team.2.clean.df, by = c("match.id" = "match.id"))
View(team.2.clean.df)
# Unnesting data.frame for Team 2
team.2.clean.df <- bind_rows(team.2.clean, .id = "match.id") %>%
mutate(match.id = as.integer(match.id))
id.need <- ids %>%
filter(league.gender == "Women", season.id == "1718") %>%
select(league.gender, season.id, match.id, team.2, team.2.id)
team.2.clean.df <- id.need %>%
left_join(team.2.clean.df, by = c("match.id" = "match.id"))
season.women.1718 <- bind_rows(team.1.clean.df, team.2.clean.df)
View(season.women.1718)
rm(team.1.clean.df, team.2.clean.df, team.1.clean, team.2.clean)
rm(team.1.clean.df, team.2.clean.df, team.1.clean, team.2.clean, team.1, team.2, nm.vec, id.need, ids)
glimpse(season.women.1718)
str(season.women.1718)
View(season.women.1718)
View(season.women.1718)
library(tabulizer)
library(stringr)
library(dplyr)
library(tidyr)
library(purrr)
###################################################################################
############ FUNCTION match_stat BEGIN ############################################
#
# Function uses the tabulizer package to export the
# Team statistcs table. It takes a data.frame as first
# argument and the team as second argument (position).
# The function is calibrated for the position of the team
# statistics manually by using the locate_areas()
# function of the tabulizer package
#
match_stat <- function(x, position = 1){
if (position == 1) {
pos <- list(c(177,  0, 340, 840))
}
if (position == 2) {
pos <- list(c(415, 0, 573, 840))
}
as.data.frame(extract_tables(x,
area = pos,
output = "data.frame",
method = "stream"))
}
############ FUNCTION match_stat END ##############################################
###################################################################################
###################################################################################
############ FUNCTION clean_reception BEGIN #######################################
#
# Function takes a data.frame as argument and checks if the number of columns
# is 16. If TRUE then column 11 ist assumed to be messed up and it is separated
# using regular expressions. Then everything is put together and returned. If
# condition is FALSE, the function returns the original object
#
clean_reception <- function(x){
# If number of columns is 16, then column 11
# has to be cleaned. This is done in the if
# col_number 16 == TRUE case
if(dim(x)[2] == 16) {
# Split data.frame in 3 parts
part.1 <- x[1:10]
part.2 <- x[11]
part.3 <- x[12:16]
# Clean column 11 and separate it into two columns
names(part.2) <- c("X1")
part.2   <- part.2 %>%
mutate(X1   = str_replace(X1, "[:space:]{1,5}", "")) %>%
mutate(col1 = str_extract(X1, "([:digit:]|[:digit:][:digit:])%")) %>%
mutate(col2 = str_sub(X1, -2)) %>%
mutate(col1 = str_remove(col1, "\\(")) %>%
mutate(col1 = str_remove(col1, "\\)")) %>%
mutate(col1 = str_remove(col1, "%")) %>%
mutate(col2 = str_remove(col2, "\\)")) %>%
mutate(col2 = str_replace_all(col2, "Â·{1,}", "")) %>%
select(col1, col2)
# Bind everything back together
part.1 <- bind_cols(part.1, part.2)
part   <- bind_cols(part.1, part.3)
return(part)
} else {
return(x)
}
}
############ FUNCTION clean_reception END ######################
################################################################
################################################################
############ FUNCTION clean_col_1 BEGIN ########################
clean_col_1 <- function(x) {
y <- x[1]
names(y) <- c("X1")
y <- y %>%
mutate(shirt.number = str_extract(X1, "[:digit:]{1,2}")) %>%
mutate(shirt.number = as.integer((shirt.number))) %>%
mutate(set.1 = as.integer(str_sub(X1, -2)))       %>%
mutate(X1 = str_replace_all(X1, "[:digit:]", "")) %>%
mutate(X1 = str_replace_all(X1, "C ", ""))        %>%
mutate(X1 = str_replace_all(X1, "L ", ""))        %>%
rename(player.name = X1)                          %>%
select(shirt.number, player.name)
return(y)
}
############ FUNCTION clean_col_1 END ##########################
################################################################
################################################################
############ FUNCTION rm_useless_rows BEGIN ####################
#
# Function removes columns without shirt numbers, i.e.
# non-player columns.
#
rm_useless_rows <- function(x) {
return(x %>% filter(!is.na(shirt.number)))
}
############ FUNCTION rm_useless_rows END ######################
################################################################
################################################################
############ FUNCTION rename_cols BEGIN ########################
rename_cols <- function(x) {
names(x) <- c("shirt.number", "player.name", "vote", "pt_tot",
"pt_bp", "pt_profloss", "serv_tot", "serv_err",
"serv_pt", "rec_tot", "rec_err", "rec_pos", "rec_per",
"att_tot", "att_err", "att_blo", "att_pt", "att_per",
"blo_pt")
return(x)
}
############ FUNCTION rename_cols END ##########################
################################################################
################################################################
############ FUNCTION numerize_vars BEGIN ######################
numerize_vars <- function(x) {
return(
x %>% mutate(rec_pos = str_remove(rec_pos, "%"),
rec_per = str_remove(rec_per, "%"),
rec_per = str_remove(rec_per, "\\("),
rec_per = str_remove(rec_per, "\\)"),
att_per = str_remove(att_per, "%")) %>%
mutate_each(funs(as.integer), starts_with("vote")) %>%
mutate_each(funs(as.integer), starts_with("pt_")) %>%
mutate_each(funs(as.integer), starts_with("serv_")) %>%
mutate_each(funs(as.integer), starts_with("rec_")) %>%
mutate_each(funs(as.integer), starts_with("att_")) %>%
mutate_each(funs(as.integer), starts_with("blo_pt"))
)
}
############ FUNCTION numerize_vars END ########################
################################################################
# Vector with file names
nm.vec <- as.list(list.files(pattern = "*.pdf"))
# Scrap Teams from PDFs
team.1 <- map(nm.vec, match_stat, position = 1)
team.2 <- map(nm.vec, match_stat, position = 2)
# Attaching match ids as names for the list elements
match.id <- str_remove(nm.vec, ".pdf")
names(team.1) <- match.id
names(team.2) <- match.id
# Example of an exported data.frame
team.1[[31]]
# Example column 1 before cleaning
team.1[[3]][1]
# Cleaning column 1
team.1.part.1 <- map(team.1, clean_col_1)
team.2.part.1 <- map(team.2, clean_col_1)
# Example column 1 after cleaning
team.1.part.1[[3]]
# Only columns 8 and all subsequent columns are selected
team.1.part.2 <- map(team.1, function(x){x[-c(1:7)]} )
team.2.part.2 <- map(team.2, function(x){x[-c(1:7)]} )
# Delete all empty columns:
team.1.part.2 <- map(team.1.part.2, function(x){x %>% select_if(~sum(!is.na(.)) > 0)})
team.2.part.2 <- map(team.2.part.2, function(x){x %>% select_if(~sum(!is.na(.)) > 0)})
# Clean reception variable
team.1.part.2 <- map(team.1.part.2, clean_reception)
team.2.part.2 <- map(team.2.part.2, clean_reception)
# Combine part.1 and part.2
team.1.clean <- map2(team.1.part.1, team.1.part.2, bind_cols)
team.2.clean <- map2(team.2.part.1, team.2.part.2, bind_cols)
rm(team.1.part.1, team.1.part.2, team.2.part.1, team.2.part.2)
# Rename cols
team.1.clean <- map(team.1.clean, rename_cols)
team.2.clean <- map(team.2.clean, rename_cols)
# Remove rows with shirt.number == NA
team.1.clean <- map(team.1.clean, rm_useless_rows)
team.2.clean <- map(team.2.clean, rm_useless_rows)
# Transform chars to integers
team.1.clean <- map(team.1.clean, numerize_vars)
team.2.clean <- map(team.2.clean, numerize_vars)
# Loading identifier
ids <- read.csv("00_SEASON_TEAM_IDENTIFIER.csv",
header = TRUE) %>% select(-X)
# Unnesting data.frame for Team 1
team.1.clean.df <- bind_rows(team.1.clean, .id = "match.id") %>%
mutate(match.id = as.integer(match.id))
id.need <- ids %>%
filter(league.gender == "Women", season.id == "1718") %>%
select(league.gender, season.id, match.id, team.1, team.1.id) %>%
rename(team.name = team.1,
team.id   = team.1.id)
team.1.clean.df <- id.need %>%
left_join(team.1.clean.df, by = c("match.id" = "match.id"))
# Unnesting data.frame for Team 2
team.2.clean.df <- bind_rows(team.2.clean, .id = "match.id") %>%
mutate(match.id = as.integer(match.id))
id.need <- ids %>%
filter(league.gender == "Women", season.id == "1718") %>%
select(league.gender, season.id, match.id, team.2, team.2.id) %>%
rename(team.name = team.2,
team.id   = team.2.id)
team.2.clean.df <- id.need %>%
left_join(team.2.clean.df, by = c("match.id" = "match.id"))
# Combining final Season Data
season.women.1718 <- bind_rows(team.1.clean.df, team.2.clean.df)
rm(team.1.clean.df, team.2.clean.df, team.1.clean, team.2.clean, team.1, team.2, nm.vec, id.need, ids)
# Export data as CSV
write.csv(season.women.1718, "SEASONSMATCHPLAYERLEVELWOMEN1718.csv", row.names = FALSE)
glimpse(season.women.1718)
str(season.women.1718)
View(season.women.1718)
head(season.women.1718$player.name)
?str_remove
head(str_remove(season.women.1718$player.name, "[:blank:]"))
library(tabulizer)
library(stringr)
library(dplyr)
library(tidyr)
library(purrr)
###################################################################################
############ FUNCTION match_stat BEGIN ############################################
#
# Function uses the tabulizer package to export the
# Team statistcs table. It takes a data.frame as first
# argument and the team as second argument (position).
# The function is calibrated for the position of the team
# statistics manually by using the locate_areas()
# function of the tabulizer package
#
match_stat <- function(x, position = 1){
if (position == 1) {
pos <- list(c(177,  0, 340, 840))
}
if (position == 2) {
pos <- list(c(415, 0, 573, 840))
}
as.data.frame(extract_tables(x,
area = pos,
output = "data.frame",
method = "stream"))
}
############ FUNCTION match_stat END ##############################################
###################################################################################
###################################################################################
############ FUNCTION clean_reception BEGIN #######################################
#
# Function takes a data.frame as argument and checks if the number of columns
# is 16. If TRUE then column 11 ist assumed to be messed up and it is separated
# using regular expressions. Then everything is put together and returned. If
# condition is FALSE, the function returns the original object
#
clean_reception <- function(x){
# If number of columns is 16, then column 11
# has to be cleaned. This is done in the if
# col_number 16 == TRUE case
if(dim(x)[2] == 16) {
# Split data.frame in 3 parts
part.1 <- x[1:10]
part.2 <- x[11]
part.3 <- x[12:16]
# Clean column 11 and separate it into two columns
names(part.2) <- c("X1")
part.2   <- part.2 %>%
mutate(X1   = str_replace(X1, "[:space:]{1,5}", "")) %>%
mutate(col1 = str_extract(X1, "([:digit:]|[:digit:][:digit:])%")) %>%
mutate(col2 = str_sub(X1, -2)) %>%
mutate(col1 = str_remove(col1, "\\(")) %>%
mutate(col1 = str_remove(col1, "\\)")) %>%
mutate(col1 = str_remove(col1, "%")) %>%
mutate(col2 = str_remove(col2, "\\)")) %>%
mutate(col2 = str_replace_all(col2, "Â·{1,}", "")) %>%
select(col1, col2)
# Bind everything back together
part.1 <- bind_cols(part.1, part.2)
part   <- bind_cols(part.1, part.3)
return(part)
} else {
return(x)
}
}
############ FUNCTION clean_reception END ######################
################################################################
################################################################
############ FUNCTION clean_col_1 BEGIN ########################
clean_col_1 <- function(x) {
y <- x[1]
names(y) <- c("X1")
y <- y %>%
mutate(shirt.number = str_extract(X1, "[:digit:]{1,2}")) %>%
mutate(shirt.number = as.integer((shirt.number))) %>%
mutate(set.1 = as.integer(str_sub(X1, -2)))       %>%
mutate(X1 = str_replace_all(X1, "[:digit:]", "")) %>%
mutate(X1 = str_replace_all(X1, "C ", ""))        %>%
mutate(X1 = str_replace_all(X1, "L ", ""))        %>%
mutate(X1 = str_remove(X1, "[:blank:]"))          %>%
rename(player.name = X1)                          %>%
select(shirt.number, player.name)
return(y)
}
############ FUNCTION clean_col_1 END ##########################
################################################################
################################################################
############ FUNCTION rm_useless_rows BEGIN ####################
#
# Function removes columns without shirt numbers, i.e.
# non-player columns.
#
rm_useless_rows <- function(x) {
return(x %>% filter(!is.na(shirt.number)))
}
############ FUNCTION rm_useless_rows END ######################
################################################################
################################################################
############ FUNCTION rename_cols BEGIN ########################
rename_cols <- function(x) {
names(x) <- c("shirt.number", "player.name", "vote", "pt_tot",
"pt_bp", "pt_profloss", "serv_tot", "serv_err",
"serv_pt", "rec_tot", "rec_err", "rec_pos", "rec_per",
"att_tot", "att_err", "att_blo", "att_pt", "att_per",
"blo_pt")
return(x)
}
############ FUNCTION rename_cols END ##########################
################################################################
################################################################
############ FUNCTION numerize_vars BEGIN ######################
numerize_vars <- function(x) {
return(
x %>% mutate(rec_pos = str_remove(rec_pos, "%"),
rec_per = str_remove(rec_per, "%"),
rec_per = str_remove(rec_per, "\\("),
rec_per = str_remove(rec_per, "\\)"),
att_per = str_remove(att_per, "%")) %>%
mutate_each(funs(as.integer), starts_with("vote")) %>%
mutate_each(funs(as.integer), starts_with("pt_")) %>%
mutate_each(funs(as.integer), starts_with("serv_")) %>%
mutate_each(funs(as.integer), starts_with("rec_")) %>%
mutate_each(funs(as.integer), starts_with("att_")) %>%
mutate_each(funs(as.integer), starts_with("blo_pt"))
)
}
############ FUNCTION numerize_vars END ########################
################################################################
# Vector with file names
nm.vec <- as.list(list.files(pattern = "*.pdf"))
# Scrap Teams from PDFs
team.1 <- map(nm.vec, match_stat, position = 1)
team.2 <- map(nm.vec, match_stat, position = 2)
# Attaching match ids as names for the list elements
match.id <- str_remove(nm.vec, ".pdf")
names(team.1) <- match.id
names(team.2) <- match.id
# Example of an exported data.frame
team.1[[31]]
# Example column 1 before cleaning
team.1[[3]][1]
# Cleaning column 1
team.1.part.1 <- map(team.1, clean_col_1)
team.2.part.1 <- map(team.2, clean_col_1)
# Example column 1 after cleaning
team.1.part.1[[3]]
# Only columns 8 and all subsequent columns are selected
team.1.part.2 <- map(team.1, function(x){x[-c(1:7)]} )
team.2.part.2 <- map(team.2, function(x){x[-c(1:7)]} )
# Delete all empty columns:
team.1.part.2 <- map(team.1.part.2, function(x){x %>% select_if(~sum(!is.na(.)) > 0)})
team.2.part.2 <- map(team.2.part.2, function(x){x %>% select_if(~sum(!is.na(.)) > 0)})
# Clean reception variable
team.1.part.2 <- map(team.1.part.2, clean_reception)
team.2.part.2 <- map(team.2.part.2, clean_reception)
# Combine part.1 and part.2
team.1.clean <- map2(team.1.part.1, team.1.part.2, bind_cols)
team.2.clean <- map2(team.2.part.1, team.2.part.2, bind_cols)
rm(team.1.part.1, team.1.part.2, team.2.part.1, team.2.part.2)
# Rename cols
team.1.clean <- map(team.1.clean, rename_cols)
team.2.clean <- map(team.2.clean, rename_cols)
# Remove rows with shirt.number == NA
team.1.clean <- map(team.1.clean, rm_useless_rows)
team.2.clean <- map(team.2.clean, rm_useless_rows)
# Transform chars to integers
team.1.clean <- map(team.1.clean, numerize_vars)
team.2.clean <- map(team.2.clean, numerize_vars)
# Loading identifier
ids <- read.csv("00_SEASON_TEAM_IDENTIFIER.csv",
header = TRUE) %>% select(-X)
# Unnesting data.frame for Team 1
team.1.clean.df <- bind_rows(team.1.clean, .id = "match.id") %>%
mutate(match.id = as.integer(match.id))
id.need <- ids %>%
filter(league.gender == "Women", season.id == "1718") %>%
select(league.gender, season.id, match.id, team.1, team.1.id) %>%
rename(team.name = team.1,
team.id   = team.1.id)
team.1.clean.df <- id.need %>%
left_join(team.1.clean.df, by = c("match.id" = "match.id"))
# Unnesting data.frame for Team 2
team.2.clean.df <- bind_rows(team.2.clean, .id = "match.id") %>%
mutate(match.id = as.integer(match.id))
id.need <- ids %>%
filter(league.gender == "Women", season.id == "1718") %>%
select(league.gender, season.id, match.id, team.2, team.2.id) %>%
rename(team.name = team.2,
team.id   = team.2.id)
team.2.clean.df <- id.need %>%
left_join(team.2.clean.df, by = c("match.id" = "match.id"))
# Combining final Season Data
season.women.1718 <- bind_rows(team.1.clean.df, team.2.clean.df)
rm(team.1.clean.df, team.2.clean.df, team.1.clean, team.2.clean, team.1, team.2, nm.vec, id.need, ids)
# Export data as CSV
write.csv(season.women.1718, "SEASONSMATCHPLAYERLEVELWOMEN1718.csv", row.names = FALSE)
glimpse(season.women.1718)
str(season.women.1718)
head(season.women.1718$player.name)
ggplot(season.women.1718, aes(x = serv_tot, y = serv_err)) + geom_point(position = "dodge")
library(ggplot2)
ggplot(season.women.1718, aes(x = serv_tot, y = serv_err)) + geom_point(position = "dodge")
ggplot(season.women.1718, aes(x = serv_tot, y = serv_err)) + geom_point(position = "jitter")
ggplot(season.women.1718, aes(x = serv_pt, y = serv_err)) + geom_point(position = "jitter")
ggplot(season.women.1718, aes(x = serv_err, y = serv_pt)) + geom_point(position = "jitter")
ggplot(season.women.1718, aes(x = serv_err, y = serv_pt)) + geom_bar(position = "jitter")
ggplot(season.women.1718, aes(x = serv_err, y = serv_pt)) + geom_col(position = "jitter")
ggplot(season.women.1718, aes(x = serv_err, y = serv_pt, color = facttor(team.id))) + geom_point(position = "jitter")
ggplot(season.women.1718, aes(x = serv_err, y = serv_pt, color = factor(team.id))) + geom_point(position = "jitter")
ggplot(season.women.1718, aes(x = serv_tot, y = serv_pt, color = factor(team.id))) + geom_point(position = "jitter")
ggplot(season.women.1718, aes(x = serv_tot)) + geom_boxplot(position = "jitter")
ggplot(season.women.1718, aes(x = serv_tot)) + geom_boxplot()
ggplot(season.women.1718, aes(x = serv_tot, group = teami.id)) + geom_boxplot()
ggplot(season.women.1718, aes(x = serv_tot, group = team.id)) + geom_boxplot()
ggplot(season.women.1718, aesyx = serv_tot, group = team.id)) + geom_boxplot()
ggplot(season.women.1718, aes(x = serv_tot, y = team.id)) + geom_boxplot()
ggplot(season.women.1718, aes(x = team.id, y = serv_tot)) + geom_boxplot()
ggplot(season.women.1718, aes(x = team.id, y = serv_tot, group = team.id)) + geom_boxplot()
ggplot(season.women.1718, aes(x = team.id, y = serv_tot, group = factor(team.id)) + geom_boxplot()
)
ggplot(season.women.1718, aes(x = team.id, y = serv_tot, group = factor(team.id))) + geom_boxplot()
ggplot(season.women.1718, aes(x = team.id, y = serv_pt, group = factor(team.id))) + geom_boxplot()
summary(season.women.1718$serv_pt)
season.women.1718[season.women.1718$serv_pt > 8,]
season.women.1718[season.women.1718$serv_pt > 8]
season.women.1718[,season.women.1718$serv_pt > 8]
